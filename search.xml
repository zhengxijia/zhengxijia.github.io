<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis的Java客户端Jedis</title>
      <link href="/2018/05/23/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AFJedis/"/>
      <url>/2018/05/23/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AFJedis/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis的Java客户端Jedis"><a href="#Redis的Java客户端Jedis" class="headerlink" title="Redis的Java客户端Jedis"></a>Redis的Java客户端Jedis</h3><ul><li><h4 id="Jedis所需要的jar包"><a href="#Jedis所需要的jar包" class="headerlink" title="Jedis所需要的jar包"></a>Jedis所需要的jar包</h4><p>commons-pool-1.6.jar<br>jedis-2.1.0.jar</p></li><li><h4 id="Jedis常用操作"><a href="#Jedis常用操作" class="headerlink" title="Jedis常用操作"></a>Jedis常用操作</h4><ol><li><h5 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h5></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//查看服务是否运行，打出pong表示OK</span></span><br><span class="line">    System.out.println(jedis.ping());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="JedisPool配置参数"><a href="#JedisPool配置参数" class="headerlink" title="JedisPool配置参数"></a>JedisPool配置参数</h4><p><code>JedisPool</code>的配置参数大部分是由<code>JedisPoolConfig</code>的对应项来赋值的；<br><code>maxActive</code>：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted；<br><code>maxIdle</code>：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；<br><code>whenExhaustedAction</code>：表示当pool中的jedis实例都被<code>allocated</code>完时，<code>pool</code>要采取的操作；默认有三种：</p><ul><li><code>WHEN_EXHAUSTED_FAIL</code>：表示无jedis实例时，直接抛出<code>NoSuchElementException</code>；</li><li><code>WHEN_EXHAUSTED_BLOCK</code>： 表示阻塞住，或者达到<code>maxWait</code>时抛出<code>JedisConnectionException</code>；</li><li><code>WHEN_EXHAUSTED_GROW</code>：表示新建一个jedis实例，也就说设置的<code>maxActive</code>无用；</li></ul><p><code>maxWait</code>：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛<code>JedisConnectionException</code>；<br><code>testOnBorrow</code>：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；<br><code>testOnReturn</code>：return 一个jedis实例给pool时，是否检查连接可用性（ping()）；　　<br><code>testWhileIdle</code>：如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；　　<br><code>timeBetweenEvictionRunsMillis</code>：表示idle object evitor两次扫描之间要sleep的毫秒数；<br><code>numTestsPerEvictionRun</code>：表示idle object evitor每次扫描的最多的对象数；<br><code>minEvictableIdleTimeMillis</code>：表示一个对象至少停留在idle状态的最短时间，然后才能被<code>idle object evitor</code>扫描并驱逐；这一项只有在<code>timeBetweenEvictionRunsMillis</code>大于0时才有意义；<br><code>softMinEvictableIdleTimeMillis</code>：在<code>minEvictableIdleTimeMillis</code>基础上，加入了至少<code>minIdle</code>个对象已经在pool里面了。如果为-1，evicted不会根据idle time驱逐任何对象。如果<code>minEvictableIdleTimeMillis&gt;0</code>，则此项设置无意义，且只有在<code>timeBetweenEvictionRunsMillis</code>大于0时才有意义；<br><code>lifo</code>：borrowObject返回对象时，是采用DEFAULT_LIFO（last in first out，即类似cache的最频繁使用队列），如果为False，则表示FIFO队列；<br>其中<code>JedisPoolConfig</code>对一些参数的默认设置如下：</p><ul><li><code>testWhileIdle=true</code></li><li>``minEvictableIdleTimeMills=60000`</li><li><code>timeBetweenEvictionRunsMillis=30000</code></li><li><code>numTestsPerEvictionRun=-1</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtils</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (JedisPoolUtils.class) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">                      JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">                      poolConfig.setMaxActive(<span class="number">1000</span>);</span><br><span class="line">                      poolConfig.setMaxIdle(<span class="number">30</span>);</span><br><span class="line">                      poolConfig.setMaxWait(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">                      poolConfig.setTestOnBorrow(<span class="keyword">true</span>);</span><br><span class="line">                      jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">"192.168.15.128"</span>, <span class="number">6379</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(JedisPool jedisPool,Jedis jedis)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jedis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            jedisPool.returnResourceObject(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的事务</title>
      <link href="/2018/05/21/Redis%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/05/21/Redis%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h3><ul><li><h4 id="redis事务简介"><a href="#redis事务简介" class="headerlink" title="redis事务简介"></a>redis事务简介</h4><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞；</p></li><li><h4 id="redis事务能干什么"><a href="#redis事务能干什么" class="headerlink" title="redis事务能干什么"></a>redis事务能干什么</h4><p>一个队列中，一次性、顺序性、排他性的执行一系列命令；</p></li><li><h4 id="redis事务执行五种情况"><a href="#redis事务执行五种情况" class="headerlink" title="redis事务执行五种情况"></a>redis事务执行五种情况</h4><p>case1：正常执行 执行<code>exec</code>全部成功；<br>case2：放弃事务 执行<code>discard</code>；<br>case3：全体连坐 在向事物队列中添加命令的时候报错，然后执行<code>exec</code>会全部失败；<br>case4：冤头债主 在向事物队列中添加命令的时候没有报错，但在执行<code>exec</code>的时候某一条命令执行失败，只会影响这一个，其他的会执行成功，这种为部分成功；<br>case5：<code>watch</code>监控<br><strong>Redis部分支持事务</strong></p></li><li><h4 id="悲观锁-乐观锁-CAS-Check-And-Set"><a href="#悲观锁-乐观锁-CAS-Check-And-Set" class="headerlink" title="悲观锁/乐观锁/CAS(Check And Set)"></a>悲观锁/乐观锁/CAS(Check And Set)</h4><p><strong>悲观锁</strong><br>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<br>传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。<br><strong>乐观锁</strong><br>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。<br><strong>CAS(Check And Set)</strong><br><code>witch</code>命令可以为 Redis 事务提供 check-and-set （CAS）行为，类似乐观锁。<br>被 <code>witch</code>的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 <code>exec</code>执行之前被修改了，那么整个事务都会被取消，<code>exec</code>返回空多条批量回复（null multi-bulk reply）来表示事务已经失败。</p></li><li><h4 id="redis事务执行的过程"><a href="#redis事务执行的过程" class="headerlink" title="redis事务执行的过程"></a>redis事务执行的过程</h4><p>开启：以<code>multi</code>开始一个事务；　　<br>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面；<br>执行：由<code>exec</code>命令触发事务；</p></li><li><h4 id="redis事务的特性"><a href="#redis事务的特性" class="headerlink" title="redis事务的特性"></a>redis事务的特性</h4><ol><li>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断；</li><li>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题；</li><li>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚；</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的复制（Master | Slave）</title>
      <link href="/2018/05/17/Redis%E7%9A%84%E5%A4%8D%E5%88%B6%EF%BC%88Master%20%20Slave%EF%BC%89/"/>
      <url>/2018/05/17/Redis%E7%9A%84%E5%A4%8D%E5%88%B6%EF%BC%88Master%20%20Slave%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="Redis复制简介"><a href="#Redis复制简介" class="headerlink" title="Redis复制简介"></a>Redis复制简介</h4><p>行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，master以写为主，slave以读为主；</p></li><li><h4 id="Redis的复制能干什么"><a href="#Redis的复制能干什么" class="headerlink" title="Redis的复制能干什么"></a>Redis的复制能干什么</h4><p>读写分离；<br>容灾恢复；</p></li><li><h4 id="Redis复制如何去应用"><a href="#Redis复制如何去应用" class="headerlink" title="Redis复制如何去应用"></a>Redis复制如何去应用</h4><ol><li><p>配从(库)不配主(库)；</p></li><li><p>从库配置：执行命令<code>slaveof 主库IP 主库端口</code>：</p><p>每次与master断开之后，都需要重新连接，除非你配置进redis.conf文件；<br>执行命令<code>info replication</code>查看主从关系；</p></li><li><p>修改配置文件细节操作：</p><p>拷贝多个redis.conf文件；<br>开启daemonize yes；<br>修改pid文件名字；<br>修改指定端口；<br>修改log文件名字；<br>修改dump.rdb名字；</p></li><li><p>常用三招</p><p><strong>一主多仆</strong><br>一个master两个slave；<br><strong>一些问题？</strong><br>(1) 切入点问题？slave1、slave2是从头开始复制还是从切入点开始复制?<br>答：从头开始复制；<br>(2) 从机是否可以写？set可否？<br>答：从机不可以写，也就不能set；<br>(3) 主机shutdown后情况如何？从机是上位还是原地待命?<br>答：原地待命；<br>(4) 主机又回来了后，主机新增记录，从机还能否顺利复制？<br>答：可以；<br>(5) 其中一台从机宕掉后情况如何？恢复它能跟上主机吗？<br>答：不能，需要重新建立主从关系；<br><strong>薪火相传</strong><br>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力。<br>中途变更转向:会清除之前的数据，重新建立拷贝最新的。<br><strong>反客为主</strong><br>主机宕掉后，从机升级为主机：<br>选择一个从机手动执行<code>slaveof no one</code>命令变更为主机，其他从机与该主机建立主从关系。</p></li></ol></li><li><h4 id="Redis复制的原理"><a href="#Redis复制的原理" class="headerlink" title="Redis复制的原理"></a>Redis复制的原理</h4><p>master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步<br><strong>全量复制</strong>：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。slave第一次同步为全量复制。<br><strong>增量复制</strong>：master继续将新的所有收集到的修改命令依次传给slave,完成同步<br>但是只要是重新连接master,第一次完全同步（全量复制)将被自动执行。</p></li><li><h3 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h3><ol><li>哨兵模式简介</li></ol><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库；</p><ol><li>启动哨兵模式步骤：</li></ol><ul><li><p>自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错；</p></li><li><p>配置哨兵,填写内容在sentinel.conf文件中配置：</p><p><code>sentinel monitor 被监控数据库名字(自己起个名字) 127.0.0.1 6379 1</code><br>上面最后一个数字1，表示主机挂掉后salve投票看让谁接替成为主机，得票数多的成为主机；</p></li><li><p>启动哨兵</p><p>执行命令：<code>redis-sentinel /myredis/sentinel.conf</code>（目录依照各自的实际情况配置，可能目录不同）；</p></li><li><p><strong>问题</strong></p><p>如果之前的master重启回来，会不会双master冲突？<br>不会造成双冲突，之前的master会成为slave。</p></li></ul></li><li><h4 id="复制的缺点"><a href="#复制的缺点" class="headerlink" title="复制的缺点"></a>复制的缺点</h4><p><strong>复制延时</strong><br>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2018/05/15/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2018/05/15/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h4></li></ul><ol><li><h5 id="RDB介绍"><a href="#RDB介绍" class="headerlink" title="RDB介绍"></a>RDB介绍</h5><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里；<br>RDB保存的是dump.rdb文件；<br>Redis会单独创建（<code>fork</code>）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失；<br><code>fork</code>：复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程；</p></li><li><h5 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h5><p>配置文件中默认的快照配置（冷拷贝后重新使用：可以<code>cp dump.rdb dump_new.rdb</code>）；<br>使用命令<code>save</code>或者<code>bgsave</code></p><ul><li><code>save</code>：save时只管保存，其它不管，全部阻塞；</li><li><code>bgsave</code>：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间；</li></ul><p>执行<code>flushall</code>命令，也会产生<code>dump.rdb</code>文件，但里面是空的，无意义；</p></li><li><h5 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h5><p>将备份文件 (<code>dump.rdb</code>) 移动到 redis 安装目录并启动服务即可，通过config get dir可获取目录；</p></li><li><h5 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h5><p>动态所有停止RDB保存规则的方法：<code>redis-cli config set save &quot;&quot;</code>；</p></li><li><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><p>适合大规模的数据恢复；<br>对数据完整性和一致性要求不高；</p></li><li><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><p>在一定间隔时间做一次备份，所以如果redis意外宕掉的话，就会丢失最后一次快照后的所有修改；<br>fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑；</p></li></ol><ul><li><h4 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h4></li></ul><ol><li><h5 id="AOF介绍"><a href="#AOF介绍" class="headerlink" title="AOF介绍"></a>AOF介绍</h5><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作（AOF保存的是appendonly.aof文件）；</p></li><li><h5 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h5><p>正常恢复<br>启动：修改默认的<code>appendonly no</code>，改为<code>yes</code>；<br>将有数据的aof文件复制一份保存到对应目录(目录通过<code>config get dir</code>命令获取)；<br>恢复：重启redis然后重新加载；<br>异常恢复<br>启动：修改默认的<code>appendonly no</code>，改为<code>yes</code>；<br>备份被破坏的aof文件；<br>修复：使用<code>redis-check-aof --fix</code>命令进行修复；<br>恢复：重启redis然后重新加载；</p></li><li><h5 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h5><ul><li><p>rewrite介绍</p><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof；</p></li><li><p>重写原理</p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似；</p></li><li><p>触发机制</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发；</p></li></ul></li><li><h5 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h5><p>每修改同步：<code>appendfsync always</code> 同步持久化，每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好；<br>每秒同步：<code>appendfsync everysec</code> 异步操作，每秒记录，如果一秒内宕机，有数据丢失；<br>不同步：<code>appendfsync no</code> 从不同步；</p></li><li><h5 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h5><p>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb；<br>aof运行效率要慢于rdb,每秒同步策略效率较好，不同步效率和rdb相同；</p></li></ol><ul><li><h4 id="总结（Which-One）"><a href="#总结（Which-One）" class="headerlink" title="总结（Which One）"></a>总结（Which One）</h4></li></ul><ol><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储；</p></li><li><p>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大；</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式；</p></li><li><p>同时开启两种持久化方式</p><p>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整；</p><p>同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)，快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p></li><li><p>性能建议</p><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</p><p>如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</p><p>如果不Enable AOF ，仅靠Master-Slave Replication 实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析Redis配置文件（redis.conf）</title>
      <link href="/2018/05/09/%E8%A7%A3%E6%9E%90Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88redis.conf%EF%BC%89/"/>
      <url>/2018/05/09/%E8%A7%A3%E6%9E%90Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%88redis.conf%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="INCLUDES（包含）"><a href="#INCLUDES（包含）" class="headerlink" title="INCLUDES（包含）"></a>INCLUDES（包含）</h4><p>和我们的<code>Struts2</code>配置文件类似，可以通过includes包含，<code>redis.conf</code>可以作为总闸，包含其他；</p></li><li><h4 id="GENERAL（通用）"><a href="#GENERAL（通用）" class="headerlink" title="GENERAL（通用）"></a>GENERAL（通用）</h4><ul><li><p><code>daemonize no</code></p><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程；</p><p>启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid；</p></li><li><p><code>pidfile /var/run/redis.pid</code></p><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定；</p></li><li><p><code>port 6379</code></p><p>指定Redis监听端口，默认端口为6379；</p><p>如果指定0端口，表示Redis不监听TCP连接；</p></li><li><p><code>tcp-backlog 511</code></p><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。在高并发环境下你需要一个高backlog值来避免慢客户端连接问题（注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值），所以需要增大somaxconn和tcp_max_syn_backlog两个值来达到想要的效果；</p></li><li><p><code>bind 127.0.0.1</code></p><p>绑定的主机地址；</p><p>你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接；</p></li><li><p><code>timeout 0</code></p><p>当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能；</p></li><li><p><code>tcp-keepalive 0</code></p><p>TCP连接保活策略；</p><p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 ；</p></li><li><p><code>loglevel notice</code></p><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning；</p></li><li><p><code>logfile &quot;&quot;</code></p><p>指定了记录日志的文件，空字符串的话，日志会打印到标准输出设备。后台运行的redis标准输出是/dev/null；</p></li><li><p><code>syslog-enabled no</code></p><p>是否把日志输出到syslog中；</p></li><li><p><code>syslog-ident redis</code></p><p>指定syslog里的日志标志</p></li><li><p><code>syslog-facility local0</code></p><p>指定syslog设备，值可以是USER或LOCAL0-LOCAL7；</p></li><li><p><code>databases 16</code></p><p>设置数据库的数量，默认数据库为0；</p></li></ul></li><li><h4 id="SNAPSHOTTING（快照）"><a href="#SNAPSHOTTING（快照）" class="headerlink" title="SNAPSHOTTING（快照）"></a>SNAPSHOTTING（快照）</h4><ul><li><p><code>save</code></p><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合；<br><code>save 900 1</code>：900秒（15分钟）内有1个更改<br><code>save 300 10</code>：300秒（5分钟）内有10个更改<br><code>save 60 10000</code>：60秒（1分钟）内有10000个更改</p></li><li><p><code>stop-writes-on-bgsave-error yes</code></p><p>后台存储错误停止写；</p></li><li><p><code>rdbcompression yes</code></p><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大；</p></li><li><p><code>rdbchecksum yes</code></p><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能；</p></li><li><p><code>dbfilename dump.rdb</code></p><p>指定本地数据库文件名，默认值为dump.rdb；</p></li><li><p><code>dir ./</code></p><p>指定本地数据库存放目录（rdb、aof文件也会写在这个目录）；</p></li></ul></li><li><h4 id="REPLICATION（复制）"><a href="#REPLICATION（复制）" class="headerlink" title="REPLICATION（复制）"></a>REPLICATION（复制）</h4><p>详细请看下文Redis的复制（Master | Slave）；</p></li><li><h4 id="SECURITY（安全）"><a href="#SECURITY（安全）" class="headerlink" title="SECURITY（安全）"></a>SECURITY（安全）</h4><p><code>requirepass foobared</code><br>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过<code>auth password</code>命令提供密码，默认关闭；</p></li><li><h4 id="LIMITS（极限）"><a href="#LIMITS（极限）" class="headerlink" title="LIMITS（极限）"></a>LIMITS（极限）</h4><ul><li><p><code>maxclients 10000</code></p><p>设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自身内部处理逻辑留一些句柄出来。如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应；</p></li><li><p><code>maxmemory &lt;bytes&gt;</code></p><p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素</p></li><li><p><code>maxmemory-policy noeviction</code></p><p>数据淘汰策略，Reids 具体有 6 种淘汰策略：<br>（1）volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；<br>（2）allkeys-lru：使用LRU算法移除key；<br>（3）volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键；<br>（4）allkeys-random：移除随机的key；<br>（5）volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key；<br>（6）noeviction：不进行移除。针对写操作，只是返回错误信息；</p></li><li><p><code>maxmemory-samples 5</code></p><p>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个；</p></li></ul></li><li><h4 id="APPEND-ONLY-MODE（追加）"><a href="#APPEND-ONLY-MODE（追加）" class="headerlink" title="APPEND ONLY MODE（追加）"></a>APPEND ONLY MODE（追加）</h4><ul><li><p><code>appendonly no</code></p><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失；因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no；</p></li><li><p><code>appendfilename &quot;appendonly.aof&quot;</code></p><p>指定更新日志文件名，默认为appendonly.aof；</p></li><li><p><code>appendfsync everysec</code></p><p><code>always</code>：同步持久化，每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好；<br><code>everysec</code>：出厂默认推荐，异步操作，每秒记录 如果一秒内宕机，有数据丢失；<br><code>no</code>：让操作系统来决定何时同步，不能给服务器性能带来多大的提升，而且也会增加系统奔溃时数据丢失的数量；</p></li><li><p><code>no-appendfsync-on-rewrite no</code></p><p>重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性；</p></li><li><p><code>auto-aof-rewrite-percentage 100</code></p><p>重写指定百分比，为0会禁用AOF自动重写特性；</p></li><li><p><code>auto-aof-rewrite-min-size 64mb</code></p><p>设置重写的基准值；</p></li></ul></li><li><h4 id="常见的一些配置总结"><a href="#常见的一些配置总结" class="headerlink" title="常见的一些配置总结"></a>常见的一些配置总结</h4></li></ul><p><code>redis.conf</code>配置项说明如下：</p><ol><li><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p><p><code>daemonize yes</code></p></li><li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p><p><code>pidfile /var/run/redis.pid</code></p></li><li><p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p><p><code>port 6379</code></p></li><li><p>绑定的主机地址</p><p><code>bind 127.0.0.1</code></p></li><li><p>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p><p><code>timeout 300</code></p></li><li><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p><p><code>loglevel verbose</code></p></li><li><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p><p><code>logfile stdout</code></p></li><li><p>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</p><p><code>databases 16</code></p></li><li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><p><code>save seconds changes</code></p><p>Redis默认配置文件中提供了三个条件：</p><ul><li><code>save 900 1</code></li><li><code>save 300 10</code></li><li><code>save 60 10000</code></li></ul><p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p></li><li><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><p><code>rdbcompression yes</code></p></li><li><p>指定本地数据库文件名，默认值为dump.rdb</p><p><code>dbfilename dump.rdb</code></p></li><li><p>指定本地数据库存放目录</p><p><code>dir ./</code></p></li><li><p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><p><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p></li><li><p>当master服务设置了密码保护时，slav服务连接master的密码</p><p><code>masterauth &lt;master-password&gt;</code></p></li><li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</password></p><p><code>requirepass foobared</code></p></li><li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><p><code>maxclients 128</code></p></li><li><p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><p><code>maxmemory &lt;bytes&gt;</code></p></li><li><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><p><code>appendonly no</code></p></li><li><p>指定更新日志文件名，默认为appendonly.aof</p><p><code>appendfilename appendonly.aof</code></p></li><li><p>指定更新日志条件，共有3个可选值：</p><p><code>no</code>：表示等操作系统进行数据缓存同步到磁盘（快）</p><p><code>always</code>：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</p><p><code>everysec</code>：表示每秒同步一次（折衷，默认值）</p><p><code>appendfsync everysec</code></p></li><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><p><code>vm-enabled no</code></p></li><li><p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p><p><code>vm-swap-file /tmp/redis.swap</code></p></li><li><p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><p><code>vm-max-memory 0</code></p></li><li><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><p><code>vm-page-size 32</code></p></li><li><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p><p><code>vm-pages 134217728</code></p></li><li><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><p><code>vm-max-threads 4</code></p></li><li><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><p><code>glueoutputbuf yes</code></p></li><li><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><p><code>hash-max-zipmap-entries 64</code></p><p><code>hash-max-zipmap-value 512</code></p></li><li><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><p><code>activerehashing yes</code></p></li><li><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><p><code>include /path/to/local.conf</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的数据类型</title>
      <link href="/2018/05/07/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/05/07/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="redis的五大数据类型"><a href="#redis的五大数据类型" class="headerlink" title="redis的五大数据类型"></a>redis的五大数据类型</h4></li></ul><ol><li><h5 id="string（字符串）"><a href="#string（字符串）" class="headerlink" title="string（字符串）"></a>string（字符串）</h5><p>string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value；<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。如jpg图片或者序列化的对象 ；<br>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M；</p></li><li><h5 id="list（列表）"><a href="#list（列表）" class="headerlink" title="list（列表）"></a>list（列表）</h5><p>redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。它的底层实际是个链表。</p></li><li><h5 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h5><p>redis的set是string类型的无序集合。它是通过HashTable实现的。</p></li><li><h5 id="hash（哈希，类似java里的Map）"><a href="#hash（哈希，类似java里的Map）" class="headerlink" title="hash（哈希，类似java里的Map）"></a>hash（哈希，类似java里的Map）</h5><p>redis的hash 是一个键值对集合；<br>redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象；<br>类似Java里面的Map&lt;String,Object&gt;；</p></li><li><h5 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h5><p>redis的zset 和 set 一样也是string类型元素的集合,且不允许重复的成员；<br>不同的是每个元素都会关联一个double类型的分数；<br>redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复；</p></li></ol><ul><li><h4 id="redis常见数据类型操作命令参考网址"><a href="#redis常见数据类型操作命令参考网址" class="headerlink" title="redis常见数据类型操作命令参考网址"></a>redis常见数据类型操作命令参考网址</h4><p><a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a></p></li><li><h4 id="redis-键-key-–（常用命令介绍）"><a href="#redis-键-key-–（常用命令介绍）" class="headerlink" title="redis 键(key) –（常用命令介绍）"></a>redis 键(key) –（常用命令介绍）</h4><p><code>keys *</code>：查看所有key；<br><code>exists key</code>的名字：判断某个key是否存在；<br><code>move key dbID（0-15）</code>： 当前库就没有了，被移除了；<br><code>expire key 秒钟</code>： 为给定的key设置过期时间；<br><code>ttl key</code>： 查看还有多少秒过期，-1表示永不过期，-2表示已过期；<br><code>type key</code>： 查看你的key是什么类型；</p></li><li><h4 id="redis-字符串-String-–（常用命令介绍）"><a href="#redis-字符串-String-–（常用命令介绍）" class="headerlink" title="redis 字符串(String) –（常用命令介绍）"></a>redis 字符串(String) –（常用命令介绍）</h4><p><code>set/get/del/append/strlen</code>；<br><code>Incr/decr/incrby/decrby</code>：一定要是数字才能进行加减；<br><code>getrange/setrange</code>：</p><ul><li><code>getrange</code>：获取指定区间范围内的值，类似between and的关系从零到负一表示全部；</li><li><code>setrange</code>：设置指定区间范围内的值，格式是setrange key 位置值 具体值；</li></ul><p><code>setex(set with expire) 键 秒值 值/setnx(set if not exist) 键</code></p><ul><li><code>setex</code>：设置带过期时间的key，动态设置 : setex 键 秒值 真实值</li><li><code>setnx</code>：只有在 key 不存在时设置 key 的值：setnx 键 值</li></ul><p><code>mset/mget/msetnx</code></p><ul><li><code>mset</code>：同时设置一个或多个 key-value 对。</li><li><code>mget</code>：获取所有(一个或多个)给定 key 的值。</li><li><code>msetnx</code>：同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在（如果存在key，则都不会操作，因为<code>msetnx</code>是原子性型操作）。</li></ul><p><code>getset</code>：将给定 key 的值设为 value ，并返回 key 的旧值(old value)。简单一句话，先get然后立即set。</p></li><li><h4 id="redis-列表-List-–（常用命令介绍）"><a href="#redis-列表-List-–（常用命令介绍）" class="headerlink" title="redis 列表(List) –（常用命令介绍）"></a>redis 列表(List) –（常用命令介绍）</h4><p><code>lpush/rpush/lrange</code>；<br><code>lpop/rpop</code>，移除列表key的头/尾元素；<br><code>lindex</code>，按照索引下标获得元素(从上到下)（格式：<code>lindex key index</code>）；<br><code>llen</code>：返回列表 key 的长度（格式：<code>llen key</code>）；<br><code>lerm</code>：根据参数 count 的值，移除列表中与参数 value 相等的元素（格式：<code>lerm key count value</code>）；</p><ul><li>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。</li><li>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。</li><li>count = 0 : 移除表中所有与 value 相等的值。</li></ul><p><code>ltrim</code>，截取指定范围的值后再赋值给key（格式：<code>ltrim key start stop</code>）；<br><code>rpoplpush</code>，移除列表的最后一个元素，并将该元素添加到另一个列表头部并返回（格式：<code>rpoplpush source—key destination—key</code>）；<br><code>lset</code>，将列表 key 下标为 index 的元素的值设置为 value（格式：<code>lset key index value</code>）；<br><code>linsert</code>，（格式：<code>linsert key before|after pivot value</code>）将值 value 插入到列表 key 当中，位于值 pivot 之前或之后；</p><ul><li>当 pivot 不存在于列表 key 时，不执行任何操作。</li><li>当 key 不存在时， key 被视为空列表，不执行任何操作。</li><li>如果 key 不是列表类型，返回一个错误。</li></ul><p><strong>性能总结</strong><br>它是一个字符串链表，left、right都可以插入添加；</p><ul><li>如果键不存在，创建新的链表；</li><li>如果键已存在，新增内容；</li><li>如果值全移除，对应的键也就消失了。</li><li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。</li></ul></li><li><h4 id="redis-集合-Set-–（常用命令介绍）"><a href="#redis-集合-Set-–（常用命令介绍）" class="headerlink" title="redis 集合(Set) –（常用命令介绍）"></a>redis 集合(Set) –（常用命令介绍）</h4><p><code>sadd/smembers/sismember</code>，格式：</p><ul><li><code>sadd key member [member ...]</code></li><li><code>smembers key</code></li><li><code>sismember key member</code></li></ul><p><code>scard</code>：获取集合里面的元素个数（格式：<code>scard key</code>）；<br><code>srem</code>：删除集合中元素（格式：<code>srem key member [member ...]</code>）；<br><code>srandmember</code>，（格式：<code>srandmember key [count]</code>）（不会修改set集合）</p><ul><li>如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素；</li><li>如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合；</li><li>如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值；</li></ul><p><code>spop</code>，移除并返回集合中的一个随机元素（格式：<code>spop key</code>）；<br><code>smove</code>，（格式：<code>smove source destination member</code>）将 member 元素从 source 集合移动到 destination 集合；<br><strong>数学集合类</strong></p><ul><li>差集：<code>sdiff</code>（格式：<code>sdiff key [key ...]</code>）</li><li>交集：<code>sinter</code>（格式：<code>sinter key [key ...]</code>）</li><li>并集：<code>sunion</code>（格式：<code>sunion key [key ...]</code>）</li></ul></li><li><h4 id="redis-哈希-Hash-–（常用命令介绍）"><a href="#redis-哈希-Hash-–（常用命令介绍）" class="headerlink" title="redis 哈希(Hash) –（常用命令介绍）"></a>redis 哈希(Hash) –（常用命令介绍）</h4><p><code>hset/hget/hmset/hmget/hgetall/hdel</code>，格式：</p><ul><li><code>hset key field value</code>：将哈希表 key 中的域 field 的值设为 value ；</li><li><code>hget key field</code>：返回哈希表 key 中给定域 field 的值；</li><li><code>hmset key field value [field value ...]</code>：同时将多个 field-value (域-值)对设置到哈希表 key 中；</li><li><code>hmget key field [field ...]</code>：返回哈希表 key 中，一个或多个给定域的0值；</li><li><code>hgetall key</code>：返回哈希表 key 中，所有的域和值；</li><li><code>hdel key field [field ...]</code>：删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略；</li></ul><p><code>hlen</code>，返回哈希表 key 中域的数量（格式：<code>hlen key</code>）；</p><p><code>hexists</code>，查看哈希表 key 中，给定域 field 是否存在（格式：<code>hexists key field</code>）；</p><p><code>hkeys/hvals</code>，格式：</p><ul><li><code>hkeys key</code>：返回哈希表 key 中的所有域；</li><li><code>hvals key</code>：返回哈希表 key 中所有域的值；</li></ul><p><code>hincrby/hincrbyfloat</code>，格式：</p><ul><li><code>hincrby key field increment</code>：为哈希表 key 中的域 field 的值加上增量 increment；</li><li><code>hincrbyfloat key field increment</code>：为哈希表 key 中的域 field 加上浮点数增量 increment ；</li></ul><p><code>hsetnx</code>，将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在（格式：<code>hsetnx key field value</code>）</p></li><li><h4 id="redis-有序集合Zset-sorted-set-–（常用命令介绍）"><a href="#redis-有序集合Zset-sorted-set-–（常用命令介绍）" class="headerlink" title="redis 有序集合Zset(sorted set) –（常用命令介绍）"></a>redis 有序集合Zset(sorted set) –（常用命令介绍）</h4><p><code>zadd/zrange</code>，格式：</p><ul><li><code>zadd key score member [[score member][score member] ...]</code>：将一个或多个 member 元素及其 score 值加入到有序集 key 当中；</li><li><code>zrange key start stop [WITHSCORES]</code>：返回有序集 key 中，指定区间内的成员，其中成员的位置按 score 值递增(从小到大)来排列；</li></ul><p><code>zrangebyscore</code>：（格式：<code>zrangebuscore key min max [WITHSCORES][LIMIT offset count]</code>），返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员；<br><code>zrem</code>：移除有序集 key 中的一个或多个成员，不存在的成员将被忽略（格式：<code>zrem key member [member ...]</code>）；<br><code>zcard/zcount /zrank/zscore</code>，格式：</p><ul><li><code>zcard key</code>：返回有序集 key 的基数；</li><li><code>zcount key min max</code>：返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量；</li><li><code>zrank key member</code>：返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列，排名以 0 为底，也就是说， score 值最小的成员排名为 0 ；</li><li><code>zscore key member</code>：返回有序集 key 中，成员 member 的 score 值；</li></ul><p><code>zrevrank</code>：返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序，排名以 0 为底，也就是说， score 值最大的成员排名为 0 （格式：<code>zrevrank key member</code>）；<br><code>zrevrange</code>：返回有序集 key 中，指定区间内的成员，其中成员的位置按 score 值递减(从大到小)来排列（格式：<code>zrevrange key start stop [WITHSCORES]</code>）；<br><code>zrevrangebyscore</code>：返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列（格式：<code>zrevrangebyscore key max min [WITHSCORES][LIMIT offset count]</code>）；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门介绍</title>
      <link href="/2018/05/06/Redis%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/05/06/Redis%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h4></li></ul><ol><li><h5 id="redis是什么？"><a href="#redis是什么？" class="headerlink" title="redis是什么？"></a>redis是什么？</h5><p>Redis:<code>REmote DIctionary Server</code>(远程字典服务器)<br>是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/value)分布式内存数据库，基于内存运行并支持持久化的<code>NoSQL</code>数据库，是当前最热门的<code>NoSql</code>数据库之一,也被人们称为数据结构服务器。<br><strong><em>Redis 与其他 key - value 缓存产品有以下三个特点：</em></strong></p></li></ol><ul><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用；</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储；</li><li>Redis支持数据的备份，即master-slave模式的数据备份；</li></ul><ol><li><h5 id="redis能干什么？"><a href="#redis能干什么？" class="headerlink" title="redis能干什么？"></a>redis能干什么？</h5><p>内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务；<br>取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面；<br>模拟类似于HttpSession这种需要设定过期时间的功能；<br>发布、订阅消息系统；<br>定时器、计数器；</p></li><li><h5 id="redis官网？"><a href="#redis官网？" class="headerlink" title="redis官网？"></a>redis官网？</h5><p><a href="http://redis.io/" target="_blank" rel="noopener">http://redis.io/</a><br><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p></li><li><h5 id="从哪些方面去学习redis？"><a href="#从哪些方面去学习redis？" class="headerlink" title="从哪些方面去学习redis？"></a>从哪些方面去学习redis？</h5><p>数据类型、基本操作和配置；<br>持久化和复制，RDB/AOF；<br>事务的控制；<br>复制；</p></li></ol><ul><li><h4 id="Redis的安装及启动关闭"><a href="#Redis的安装及启动关闭" class="headerlink" title="Redis的安装及启动关闭"></a>Redis的安装及启动关闭</h4><p>由于企业里面做Redis开发，99%都是Linux版的运用和安装，几乎不会涉及到Windows版，所以Windows版不作为讲解;</p></li></ul><ol><li><h5 id="Linux（CentOS-6-9）下安装redis（3-0-4）"><a href="#Linux（CentOS-6-9）下安装redis（3-0-4）" class="headerlink" title="Linux（CentOS 6.9）下安装redis（3.0.4）"></a>Linux（CentOS 6.9）下安装redis（3.0.4）</h5><p>下载获得redis-3.0.4.tar.gz后将它放入我们的Linux目录/opt；<br>/opt目录下，解压命令:<code>tar -zxvf redis-3.0.4.tar.gz</code>；<br>解压完成后出现文件夹：redis-3.0.4；<br>进入目录:<code>cd redis-3.0.4</code>；<br>在redis-3.0.4目录下执行make命令；<br>运行make命令时出现的错误：</p><p>安装gcc（能上网：<code>yum install gcc-c++</code>）；<br>再次make；<br>jemalloc/jemalloc.h：没有那个文件或目录（运行<code>make distclean</code>之后再make）；<br>如果make完成后继续执行<code>make install</code>；</p></li><li><h5 id="查看默认安装目录：usr-local-bin"><a href="#查看默认安装目录：usr-local-bin" class="headerlink" title="查看默认安装目录：usr/local/bin"></a>查看默认安装目录：usr/local/bin</h5><p><code>redis-benchmark</code>：服务启动起来后执行性能测试工具，可以在自己本子运行，看看自己本子性能如何；<br><code>redis-check-aof</code>：修复有问题的aof文件；<br><code>redis-check-dump</code>：修复有问题的dump.rdb文件；<br><code>redis-cli</code>：客户端，操作入口；<br><code>redis-sentinel</code>：redis集群使用；<br><code>redis-server</code>：Redis服务器启动命令；</p></li><li><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>修改<code>redis.conf</code>文件将里面的<code>daemonize no</code> 改成 <code>yes</code>，让服务在后台启动；<br>将默认的<code>redis.conf</code>拷贝到自己定义好的一个路径下，比如<code>/myconf/redis.conf</code>；<br>进入<code>/usr/local/bin</code>目录下运行<code>redis-server</code>，运行拷贝出存放了自定义myconf文件目录下的redis.conf文件（<code>redis-server /myconf/redis.conf</code>）;<br>在/usr/local/bin目录下运行<code>redis-cli</code>，启动客户端（<code>redis-cli -p 6379</code>）；</p></li><li><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><p>单实例关闭：<code>redis-cli shutdown</code>；<br>多实例关闭，指定端口关闭：<code>redis-cli -p 6379 shutdown</code>；</p></li></ol><ul><li><h4 id="Redis启动后杂项基础知识"><a href="#Redis启动后杂项基础知识" class="headerlink" title="Redis启动后杂项基础知识"></a>Redis启动后杂项基础知识</h4></li></ul><ol><li><h5 id="单进程"><a href="#单进程" class="headerlink" title="单进程"></a>单进程</h5><p>单进程模型来处理客户端的请求。对读写等事件的响应是通过对epoll函数的包装来做到的。Redis的实际处理速度完全依靠主进程的执行效率；<br>epoll是Linux内核为处理大批量文件描述符而作了改进的epoll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率；</p></li><li><h5 id="redis数据库的一些概念及操作"><a href="#redis数据库的一些概念及操作" class="headerlink" title="redis数据库的一些概念及操作"></a>redis数据库的一些概念及操作</h5><p>默认16个数据库，类似数组下表从零开始，初始默认使用零号库；<br>统一密码管理，16个库都是同样密码，要么都OK要么一个也连接不上，redis默认端口是<code>6379</code>；<br>select命令切换数据库：<code>select 0-15</code>；<br><code>dbsize</code>：查看当前数据库的key的数量；<br><code>flushdb</code>：清空当前库；<br><code>flushall</code>；通杀全部库；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于值传递和引用传递</title>
      <link href="/2018/04/05/%E5%85%B3%E4%BA%8E%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
      <url>/2018/04/05/%E5%85%B3%E4%BA%8E%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>今天去面试,被问到了一道题目,大致意思如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.change(a);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>问:经过方法change()后,程序最终会输出什么?</li><li>答:输出结果为1,原因是<code>变量a</code>并不是静态变量<code>static</code>,所以经过方法后数值会变,此刻面试官神情有点凝重,自行脑补~</li></ul><p>回来之后,经过一番资料查找和思考,才发现这是一个涉及<strong>值传递和引用传递</strong>的题目</p><p>首先,在java中,并没有指针这一说法,指针是C语言中的概念,但是其实在Java中的底层设计中,其实很多地方都用到了<strong>“封装好的指针”</strong>,也就是java中所说的引用地址.(引用和指针是两个完全不同的概念,但是此种情况下,可以等效对比进行学习)</p><p><strong>值传递</strong>(此处还是引用上面的题目)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">x <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">this</span>.change(a);    </span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:0</p><p>原因:int类型是基本数据类型,数据会开辟不同的栈区</p><p><img src="/2018/04/05/关于值传递和引用传递/test.png" alt="值传递"></p><p><strong>引用传递</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testRef</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StringBuffer x=<span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">this</span>.change(x);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(StringBuffer i)</span></span>&#123;</span><br><span class="line">i.append(<span class="string">" world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:Hello world!</p><p>原因:StringBuffer长度可变,append()方法会改变堆内存中的数据,程序运行流程如下图</p><p><img src="/2018/04/05/关于值传递和引用传递/testRef.png" alt="引用传递"></p><p>一个经典的值传递面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">1</span>;</span><br><span class="line">    switchValue(x,y);</span><br><span class="line">    System.out.println(<span class="string">"x="</span>+x);</span><br><span class="line">    System.out.println(<span class="string">"y="</span>+y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">switchValue</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:x=0      y=1;</p><p>一个经典的引用传递面试题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> testSB&#123;</span><br><span class="line">    StringBuffer a=<span class="keyword">new</span> StringBuffer(<span class="string">"Hello"</span>);</span><br><span class="line">    StringBuffer b=a;</span><br><span class="line">    a.append(<span class="string">" World!"</span>);</span><br><span class="line">    a=b;</span><br><span class="line">    System.out.println(<span class="string">"a="</span>+a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:a=Hello World!</p><p><strong>总结</strong>:</p><ol><li><p>基本类型的变量保存原始值，所以变量就是数据本身。</p><p>常见的基本类型：byte,short,int,long,char,float,double,Boolean。</p></li><li><p>引用类型的变量保存引用值，所谓的引用值就是对象所在内存空间的“首地址值”，通过对这个引用值来操作对象。</p><p>常见的引用类型：类类型，接口类型和数组。</p><p><strong>注意:String类型比较特殊,底层是final修饰的char类型</strong>,要具体看源代码进行分析</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo如何插入本地图片</title>
      <link href="/2018/04/03/Hexo%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2018/04/03/Hexo%E5%A6%82%E4%BD%95%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>最近刚开始玩Hexo,感觉很不错,特别是用MarkDown写文章,简直是一件很简洁舒服的事情,但是最近发现图片的插入是个问题,网上很多人都是用第三方服务来存储图片,最后再通过链接地址来显示图片,一来二去感觉很麻烦,经过一番搜索发现,可以用以下方法解决:</p><ol><li><p>首先在_config.yml中将属性设置为post_asset_folder:true,一开始默认为false</p></li><li><p>在hexo目录下安装一个可以上传本地图片的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>运行<code>hexo n &quot;xxx&quot;</code>来生成MarkDown文件时,发现 <code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个同名的文件夹(注意:右键创建<code>xxxx.md</code>或者<code>touch xxxx.md</code>不会生成对应的文件夹) </p></li><li><p>将图片放在对应的文件夹中,例如图片<code>logo.jpg</code>,只要在MarkDown文件中引入<code>![Im a Boy](文件夹名/boy.jpg)</code> 就可以插入图片。</p></li></ol><p>其中<code>[]</code>为图片标题,<code>()</code>中为图片相对路径,生成的html为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/2019/04/03/本地图片测试/boy.jpg&quot; alt=&quot;boy&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2018/04/03/Hexo如何插入本地图片/boy.jpg" alt="Im a Boy"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring通过DI(依赖注入)实现IOC(控制反转)</title>
      <link href="/2018/02/21/Spring%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/02/21/Spring%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>常用的注解方式:<strong>构造器注入，setter注入，注解AutoWired的注入</strong> </p><h5 id="1-构造方法注入"><a href="#1-构造方法注入" class="headerlink" title="1.构造方法注入"></a>1.构造方法注入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RedisService &#123;</span><br><span class="line"></span><br><span class="line">    private final RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    public UserService(RedisTemplate redisTemplate) &#123;</span><br><span class="line">        this.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注册RedisService --&gt;</span><br><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.vic.www.service.RedisService&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;redisTemplate&quot; ref=&quot;redisTemplate&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">//注意:ref=&quot;redisTemplate&quot;中的redisTemplate已经被Spring中的IOC管理,这里省略配置</span><br></pre></td></tr></table></figure><h5 id="2-setter方法注入"><a href="#2-setter方法注入" class="headerlink" title="2.setter方法注入"></a>2.setter方法注入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class RedisService &#123;</span><br><span class="line"></span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line"> public void setRedisTemplate(RedisTemplate redisTemplate)&#123;</span><br><span class="line">        this.redisTemplate =  redisTemplate;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注册RedisService --&gt;</span><br><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.vic.www.service.RedisService&quot;&gt;</span><br><span class="line">    &lt;property  name=&quot;redisTemplate&quot; ref=&quot;redisTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">//注意:ref=&quot;redisTemplate&quot;中的redisTemplate已经被Spring中的IOC管理,这里省略配置</span><br></pre></td></tr></table></figure><h5 id="3-注解AutoWired注入"><a href="#3-注解AutoWired注入" class="headerlink" title="3.注解AutoWired注入"></a>3.注解AutoWired注入</h5><p>autowire主要有三个属性值：constructor，byName，byType (默认)</p><p>主要有四种注解可以注册bean，每种注解可以任意使用，只是语义上有所差异：</p><ol><li><strong>@Component</strong>：可以用于注册所有bean</li><li><strong>@Repository</strong>：主要用于注册dao层的bean</li><li><strong>@Controller</strong>：主要用于注册控制层的bean</li><li><strong>@Service</strong>：主要用于注册服务层的bean</li></ol><p>描述依赖关系主要有两种： </p><ol><li><p><strong>@Resource</strong>：java的注解,默认以byName的方式去匹配与属性名相同的bean的id，如果没有找到就会以byType的方式查找，如果byType查找到多个的话，使用@Qualifier注解（spring注解）指定某个具体名称的bean。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">@Qualifier(&quot;redisTemplate&quot;)</span><br><span class="line">private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>@Autowired</strong>：spring注解,默认是以byType的方式去匹配与属性名相同的bean的id，如果没有找到，就通过byName的方式去查找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(&quot;redisTemplate&quot;)</span><br><span class="line">private RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结</strong>：虽然有三种注入方式，但是最为开发中常见的是基于注解的方式,如果想要引用一些非自定义的类,可以在构造器注入和属性注入较为方便,如果一个接口有多个实现类,可以用@Qualifier标签进行指定</p>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
